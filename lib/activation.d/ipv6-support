#!/usr/bin/perl -T -CSDAL

use warnings;
use strict;
use IServ::Conf;
use IServ::DB;
use Net::IP;
use Path::Tiny;

undef %ENV;

my $fn_forward = "/var/lib/iserv/ipv6-support/ipset/forward.d/ipv6-support";
my $fn_proxyonly = "/var/lib/iserv/ipv6-support/ipset/proxyonly.d/ipv6-support";
my $fn_if_acl = "/var/lib/iserv/ipv6-support/ferm/if_acl.ferm";

$ENV{PATH} = '/usr/sbin:/usr/bin:/sbin:/bin';

exit 0 unless $conf->{Activation};

IServ::DB::Do "DELETE FROM nacs WHERE timer IS NOT NULL AND timer <= now()";
IServ::DB::Do "UPDATE hosts SET override_route = NULL, override_until = NULL, ".
  "override_by = NULL WHERE override_until <= now()";
IServ::DB::Do "UPDATE hosts SET deploy_until = NULL ".
  "WHERE deploy_until <= now()";

# IPv6 hosts will be mapped to a "home interface" using their IPv4 address
my %if_mapping;

for (split /\n/, qx(netquery -p 'net/bits\tif'))
{
  my ($net, $if) = split /\t/, $_, 2;
  push  @{ $if_mapping{$net} }, $if;
}

my %active = IServ::DB::SelectAll_Hash "
  -- add whitelisted hosts
  SELECT mac, ip, proxyenforce FROM hosts
    WHERE (
      -- whitelisted in computer management
      internet
      -- whitelisted in the computer module
      OR override_route
      -- whitelisted by deploy
      OR deploy_until IS NOT NULL
    ) AND mac IS NOT NULL
  -- add users with inet_access privilege
  UNION SELECT mac, ip, proxyenforce FROM samba_user_last
    JOIN users_priv USING (act)
    LEFT OUTER JOIN hosts USING (ip)
    WHERE privilege LIKE 'inet_access'
  -- add users with NACs
  UNION SELECT mac, ip, proxyenforce FROM nacs
    LEFT OUTER JOIN hosts USING (ip)
    WHERE ip IS NOT NULL
    AND timer IS NOT NULL
  -- remove hosts that have been blacklisted in the computer module
  EXCEPT SELECT mac, ip, proxyenforce FROM hosts WHERE NOT override_route
  -- remove users with inet_block privilege
  EXCEPT SELECT mac, ip, proxyenforce FROM samba_user_last
    JOIN users_priv USING (act)
    LEFT OUTER JOIN hosts USING (ip)
    WHERE privilege LIKE 'inet_block'
  ORDER BY mac
  ";

# update ipsets
# only hosts with proxyenforce='f' will be whitelisted in foward
my @fowards_macs = map { uc "$_\n" } grep { not $active{$_}{'proxyenforce'} } sort keys %active;
my @proxyonly_macs = map { uc "$_\n" } grep { $active{$_}{'proxyenforce'} } sort keys %active;

print "updating forward ipset\n";
path($fn_forward)->spew_utf8(@fowards_macs);
system "chkipsets", "-r", "-q", "iserv-ipv6-support-forward";

print "updating proxyonly ipset\n";
path($fn_proxyonly)->spew_utf8(@proxyonly_macs);
system "chkipsets", "-r", "-q", "iserv-ipv6-support-proxyonly";

print "updating network interface access list\n";

my @if_acl;
my %hosts = %active;
my %all_hosts = IServ::DB::SelectAll_Hash "SELECT mac, ip FROM hosts WHERE mac IS NOT NULL";

while (my ($k, $row) = each %all_hosts)
{
  $hosts{$k} = $row;
}

for my $mac (sort keys %hosts)
{
  my $has_interface = 0;

  for my $ip_range (sort keys %if_mapping)
  {
    my $net = Net::IP->new($ip_range);
    my $ip = Net::IP->new($hosts{$mac}{ip});

    if ($net->overlaps($ip) == $IP_B_IN_A_OVERLAP)
    {
      push @if_acl, "      interface $_ mod mac mac-source $mac RETURN;\n"
          for @{ $if_mapping{$ip_range} };
      $has_interface = 1;
    }
  }

  # No interface found (remote network, must allow from everywhere
  push @if_acl, "      mod mac mac-source $mac RETURN;\n";
}

# Do not reject unknown mac address, they will be handled by regular activation
push @if_acl, "      mod set ! set iserv-ipv6-support-all src RETURN;\n";

# Reject hosts without entry in chain
push @if_acl, "      proto tcp REJECT reject-with tcp-reset;\n";
push @if_acl, "      REJECT reject-with icmp6-adm-prohibited;\n";

unshift @if_acl, <<EOT
domain (ip6) {
  table filter {
    chain ipv6_if_filter {
EOT
;

push @if_acl, <<EOT
    }
  }
}

EOT
;

path($fn_if_acl)->spew_utf8(@if_acl);

system "/usr/lib/iserv/ipv6_if_acl_reload";
