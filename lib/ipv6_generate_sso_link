#!/usr/bin/perl -T -CSDAL

use warnings;
use strict;
use File::Slurp::Unicode;
use IServ::Conf;
use IServ::Valid;
use JSON;
use WWW::Curl::Easy;

my $username;
my $timeout_connect = 30;
my $timeout_request = 60;

if (defined $ENV{SUDO_USER})
{
  $username = IServ::Valid::User $ENV{SUDO_USER};
}
else
{
  die "no user in environment";
}

undef %ENV;

sub query($)
{
  my ($username) = @_;
  my $json = JSON->new->ascii->allow_nonref;
  my $uri = "http://127.0.0.1/iserv/api/IServ/Sso/authenticate";
  my $ct = "application/json";
  my $m_ct = qr/^application\/json/;

  my $fn_api_password = "/var/lib/iserv/pwd/ipv6sso.pwd";
  my $api_user = "ipv6sso";
  my $api_password = join "", read_file $fn_api_password;
  chomp $api_password;

  # why curl instead of lwp?
  # - curl supports connect timeout
  # - curl has reliable request timeout
  # - curl has proper error messages
  # - curl does not enforce client cert
  # - curl is supposed to be faster
  # https://curl.haxx.se/libcurl/c/curl_easy_setopt.html

  my $curl = WWW::Curl::Easy->new;
  $curl->setopt(CURLOPT_CONNECTTIMEOUT, $timeout_connect);
  $curl->setopt(CURLOPT_FAILONERROR, 1);
  $curl->setopt(CURLOPT_HTTPHEADER, ["Content-Type: $ct"]);
  $curl->setopt(CURLOPT_POST, 1);
  $curl->setopt(CURLOPT_POSTFIELDS, $json->encode({username => $username}));
  $curl->setopt(CURLOPT_TIMEOUT, $timeout_request);
  $curl->setopt(CURLOPT_URL, $uri);
  $curl->setopt(CURLOPT_USERPWD, "$api_user:$api_password");
  $curl->setopt(CURLOPT_WRITEDATA, \my $res);
  my $err = $curl->perform;

  die "curl error $err: ".$curl->errbuf."\n" if $err;
  my $res_ct = $curl->getinfo(CURLINFO_CONTENT_TYPE);
  die "empty response\n" unless defined $res;
  die "invalid content type: $res_ct\n$res\n" unless $res_ct =~ $m_ct;
  die "invalid json hash:\n$res\n" unless $res =~ /^{.*}$/;
  $json->decode($res);
}

my $res = query $username;

die "no return url given" if not defined $res->{return_to};

my $return_to = $res->{return_to};
my $host = sprintf "ipv4.%s", $conf->{Domain};

$return_to =~ s/127.0.0.1/$host/g;
$return_to =~ s/http:\/\//https:\/\//g;

print $return_to;
