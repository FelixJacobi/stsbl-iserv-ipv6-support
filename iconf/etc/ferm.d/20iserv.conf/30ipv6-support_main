domain (ip6) {
  table filter {
    chain INPUT {
      saddr @ipfilter($LAN) jump input_lan;
    }

    chain FORWARD {
      jump forward_first;

      proto tcp tcp-flags (SYN RST) SYN TCPMSS clamp-mss-to-pmtu;

      jump forward_white;

      proto tcp syn dport smtp NFLOG nflog-group 1;
      proto tcp syn dport https NFLOG nflog-group 2;

      interface tun+ ACCEPT;
      outerface tun+ ACCEPT;

      outerface $DEFIF6 jump inet_out;
      interface $DEFIF6 jump inet_in;
    }

    chain forward_first {
    }

    chain forward_white {
      #proto tcp dport (http https) mod set set always_direct dst ACCEPT;
      #proto tcp dport (http https) mod set set forward_white dst ACCEPT;
      #proto icmp mod set set iserv_ns dst mod u32 u32 '0x3&0x40=0x40' ACCEPT;
      proto udp sport ntp dport ntp mod length length 76 ACCEPT;
    }

    chain input_lan {
      proto tcp dport (domain netbios-ssn microsoft-ds ipp 4447 4448) ACCEPT;
      proto udp dport (domain dhcpv6-client dhcpv6-server tftp ntp netbios-ns netbios-dgm radius mdns) ACCEPT;
      proto tcp dport (3128 3129 13128 13129) ACCEPT;
    }

    chain input_linklocal {
      proto udp dport dhcpv6-server ACCEPT;
    }

    chain inet_in {
      saddr @ipfilter($LAN) RETURN;
      saddr fd00::/8 RETURN;
      # Reject NEW and INVALID packets from internet
      mod state state (INVALID NEW) REJECT reject-with icmp6-adm-prohibited;
      ACCEPT;
    }

    chain inet_out {
      daddr @ipfilter($LAN) RETURN;
      daddr fd00::/8 RETURN;
      jump activation_out;
    }

    chain activation_out {
      @if $activation {
        # Allow packets to the internet from clients which have been granted
        # internet access.
        mod set set mac6 src ACCEPT;
      }
    }
  }

  table nat {
    chain PREROUTING {
      jump forward_proxy;
      @if $activation {
        daddr @ipfilter($IPS6) jump redirect_proxy;
      }
    }

    chain POSTROUTING {
      # SNAT for unique local IPv6 LAN
      @if $UniqueLocalLAN {
        outerface $DEFIF saddr @ipfilter($UniqueLocalLAN) jump MASQUERADE;
      }
    }

    chain prerouting_first {

    }

    chain always_direct {
      #proto tcp dport http mod set set always_direct6 dst ACCEPT;
    }

    chain forward_proxy {
      daddr @ipfilter($IPS6) RETURN;

      interface ppp+ RETURN;
      interface tun+ RETURN;

      jump always_direct;

      @if $activation {
	# Redirect http requests from clients which have been granted internet 
        # access to Squid.
	mod set set mac6 src proto tcp dport http REDIRECT to-ports 3129;
        mod set set proxy6 src proto tcp dport http REDIRECT to-ports 3129;
        # Redirect http requests from everyone else to Squid block honeypot
        # instance. 
	proto tcp dport http REDIRECT to-ports 13129;
      } @else {
        # Redirect http requests from everyone to regular Squid if activation
        # was disabled in IServ configuration.
        proto tcp dport http REDIRECT to-ports 3129;
      }
    }

    chain redirect_proxy {
      # Redirect direct access to Squid from clients without internet access to
      # block honeypot instance.
      interface ppp+ RETURN;
      interface tun+ RETURN;

      mod set set proxy6 src RETURN;
      mod set set mac6 src RETURN;

      proto tcp dport 3129 REDIRECT to-ports 13129;
      proto tcp dport 3128 REDIRECT to-ports 13128;
    }

  }
}

