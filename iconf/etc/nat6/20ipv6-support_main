# Chain policies
# FORWARD (Routing): drop all packages which reaches the end of the cain.
# Usually there are REJECTed before.
ip6tables -P FORWARD DROP
# Fix MTU for routed packets
ip6tables -A FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmt

# INPUT (eingehende Pakete für den Server): alle Pakete annehmen, die es bis
# zum Ende der Chain geschafft haben, damit wir uns nicht aussperren, wenn die
# Chain geflusht wurde. Im Normalfall werden diese Pakete aber vorher REJECTed.
ip6tables -P INPUT ACCEPT
ip6tables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

ip6tables -N forward_white
# Die folgenden Regeln sind absichtlich vor dem MAC-Check, damit sie auch
# dann funktionieren, wenn jemand z.B. den Backupserver mit einer alten MAC in
# der Rechnerverwaltung stehen hat.
ip6tables -A FORWARD -j forward_white

# TODO iptables_multidest TODO #

# Routing für NTP erlauben
ip6tables -A forward_white -p udp --sport ntp --dport ntp \
  -m length --length 76 -j ACCEPT

# Routing für ICMP-Pakete mit "Don't fragment"-Flag zu ns.iserv.eu erlauben
# Wird von chkmtu für Path MTU Discovery verwendet.
# TODO iptables_multidest TODO #
#iptables_multidest "ns.iserv.eu" -A forward_white -p icmp \
#  -m u32 --u32 "3 & 0x40 = 0x40" -j ACCEPT

# MAC-Adresse mit Rechnerverwaltung abgleichen
ip6tables -N check_mac
# für Pakete, die geroutet werden
ip6tables -A FORWARD -p tcp --syn -j check_mac
ip6tables -A FORWARD ! -p tcp -j check_mac

/usr/lib/iserv/newhosts &> /dev/null

# Firewall für eingehende Pakete
ip6tables -A INPUT -i lo -j ACCEPT
# Ports, die aus dem Internet erreichbar sein müssen
ip6tables -N input_world
ip6tables -A INPUT -j input_world

ip6tables -A input_world -p tcp --dport ftp -j ACCEPT
ip6tables -A input_world -p tcp --dport ssh -j ACCEPT
ip6tables -A input_world -p tcp --dport smtp -j ACCEPT
ip6tables -A input_world -p tcp --dport http -j ACCEPT
ip6tables -A input_world -p tcp --dport pop3 -j ACCEPT
ip6tables -A input_world -p tcp --dport imap -j ACCEPT
ip6tables -A input_world -p tcp --dport https -j ACCEPT
ip6tables -A input_world -p tcp --dport smtps -j ACCEPT
ip6tables -A input_world -p tcp --dport submission -j ACCEPT
ip6tables -A input_world -p tcp --dport imaps -j ACCEPT
ip6tables -A input_world -p tcp --dport pop3s -j ACCEPT
ip6tables -A input_world -p tcp --dport nrpe -j ACCEPT # Nagios OS
# Portrange für passives FTP(S) für eingehende Pakete
# FTP handelt dynamisch einen Port aus dieser Range aus. Bei unverschlüsselten
# Verbindungen kann nf_conntrack_ftp den Port automatisch freigeben, aber bei
# FTPS kann nf_conntrack_ftp die verschlüsselte Verbindung nicht belauschen und
# den Port daher nicht bestimmen. Daher geben wir die Range hier pauschal frei.
ip6tables -A input_world -p tcp --sport 1024: --dport 63000:63099 -j ACCEPT
ip6tables -A input_world -p ipv6-icmp -j ACCEPT

# Always accept DHCPv6
ip6tables -A INPUT -p udp --dport 546 -j ACCEPT # DHCPv6
ip6tables -A INPUT -p udp --dport 547 -j ACCEPT # DHCPv6

ip6tables -N input_lan
# Ports, die nur im LAN erreichbar sein müssen
if [ -n "$LAN_SPEC" ]
then
  ip6tables -A INPUT -s $LAN_SPEC -j input_lan

  ip6tables -A input_lan -p tcp --dport domain -j ACCEPT
  ip6tables -A input_lan -p udp --dport domain -j ACCEPT
  ip6tables -A input_lan -p udp --dport bootps -j ACCEPT
  ip6tables -A input_lan -p udp --dport tftp -j ACCEPT
  ip6tables -A input_lan -p udp --dport ntp -j ACCEPT
  ip6tables -A input_lan -p udp --dport netbios-ns -j ACCEPT
  ip6tables -A input_lan -p udp --dport netbios-dgm -j ACCEPT
  ip6tables -A input_lan -p tcp --dport netbios-ssn -j ACCEPT
  ip6tables -A input_lan -p tcp --dport microsoft-ds -j ACCEPT
  ip6tables -A input_lan -p tcp --dport ipp -j ACCEPT
  ip6tables -A input_lan -p udp --dport radius -j ACCEPT
  # MAC-Adresse für Verbindungen zum Proxyserver prüfen
  ip6tables -A input_lan -p tcp --syn --dport 3128 -j check_mac
  ip6tables -A input_lan -p tcp --dport 3128 -j ACCEPT # Squid
  ip6tables -A input_lan -p tcp --syn --dport 3129 -j check_mac
  ip6tables -A input_lan -p tcp --dport 3129 -j ACCEPT # Squid
  ip6tables -A input_lan -p tcp --dport 4447 -j ACCEPT # opsi
  ip6tables -A input_lan -p tcp --dport 4448 -j ACCEPT # Linux Preseeding
  ip6tables -A input_lan -p udp --dport mdns -j ACCEPT

fi

# Ausnahmen die den transparenten Proxy umgehen (FORWARD-Regeln erforderlich)
ip6tables -t nat -N always_direct
ip6tables -t nat -A PREROUTING -j always_direct

# TODO iptables_multidest TODO #

# HTTP-Pakete durch den Squid-Proxy zwingen (transparenter Proxy)
ip6tables -t nat -N forward
ip6tables -t nat -A PREROUTING -j forward
netquery6 --global | xargs -i ip6tables -t nat -A forward -s $LAN_SPEC -d {} -j RETURN
ip6tables -t nat -A forward -i ppp+ -j RETURN
ip6tables -t nat -A forward -i tun+ -j RETURN
# Transparent HTTP proxy
ip6tables -t nat -A forward -s $LAN_SPEC -p tcp --dport http \
  -j REDIRECT --to-port 3129
ip6tables -t nat -A forward -j ACCEPT

# Leere Chain für Portweiterleitungen
ip6tables -t nat -N dnat
ip6tables -t nat -A PREROUTING -j dnat

# IMAP-/Sieve-Anfragen der Weboberfläche auf unverschlüsselten Port leiten
ip6tables -t nat -I OUTPUT -p tcp -d ::1/128 --dport imap \
  -j REDIRECT --to-port 10143
ip6tables -t nat -I OUTPUT -p tcp -d ::1/128 --dport sieve \
  -j REDIRECT --to-port 14190

# Geroutetes SMTP/HTTPS protokollieren, weil das von Trojanern missbraucht wird
ip6tables -A FORWARD -p tcp --dport smtp --syn -j NFLOG --nflog-group 1
ip6tables -A FORWARD -p tcp --dport https --syn -j NFLOG --nflog-group 2

# Routing für Tunnel (VPN) erlauben
ip6tables -A FORWARD -i tun+ -j ACCEPT
ip6tables -A FORWARD -o tun+ -j ACCEPT

if [ "$DEFIF" ]
then
  # Routing-Pakete, die den Server über das Default-Interface verlassen
  ip6tables -N inet_out
  # Routing-Pakete, die über das Default-Interface auf den Server kommen
  ip6tables -N inet_in

  # Pakete von/an LAN-Adressen an dieser Stelle nicht weiter filtern
  for NET in $(netquery6 --global --lan --format prefix/length)
  do
    [[ "$NET" =~ '.' ]] && continue
    ip6tables -A inet_out -d "$NET" -j RETURN
    ip6tables -A inet_in -s "$NET" -j RETURN
  done

  # Related Pakete akzeptieren
  ip6tables -A inet_in -m state --state ESTABLISHED,RELATED -j ACCEPT

  # Ankommende Routing-Pakete vom Default-Interface grundsätzlich droppen
  ip6tables -A inet_in -j DROP

  if [ "$Activation" ] && netquery6 --global --lan --quiet 
  then
    # Ausgehende Routing-Pakete über das Default-Interface
    # nur für freigeschaltete Rechner erlauben
    ip6tables -N activation_out
    ip6tables -A inet_out -j activation_out
    /usr/lib/iserv/activation6 >/dev/null
  else
    # Ausgehende Routing-Pakete über das Default-Interface
    # für alle Rechner erlauben
    ip6tables -A inet_out -j ACCEPT
  fi

  for D in "${DEFIF[@]}"
  do
    # inet_out/inet_in-Chains in das Default-Interface einhängen
    ip6tables -A FORWARD -o "$D" -j inet_out
    ip6tables -A FORWARD -i "$D" -j inet_in
  done
else
  echo "Cannot determine internet interface!"
fi

# Routing ansonsten verbieten
ip6tables -A FORWARD -j REJECT --reject-with icmp6-adm-prohibited

# unbekannte eingehende Pakete verbieten
#ip6tables -A INPUT -j LOG --log-prefix "INPUT rejected: "
# TCP-Pakete mit TCP-RST ablehnen; funktioniert besser mit nmap
ip6tables -A INPUT -p tcp -j REJECT --reject-with tcp-reset
ip6tables -A INPUT -j REJECT

# Routing aktivieren
echo 1 > /proc/sys/net/ipv6/conf/all/forwarding

